AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation for API Gateway'

Resources:
  RestApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: lanchonete-do-bairro-api-gateway

  ClientsAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'clients'

  CategoriesAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'categories'

  ProductsAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'products'

  OrdersAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'orders'

  ConsumerAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'consumer'

  OthersAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: '{proxy+}'

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref RestApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !ImportValue CognitoUserPoolARN

  ClientsAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref ClientsAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  CategoriesAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref CategoriesAPIResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  ProductsAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref ProductsAPIResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty


  OrdersAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref OrdersAPIResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty


  ConsumerAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref ConsumerAPIResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  OthersAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref OthersAPIResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ClientsAPIResourceMockMethod
      - CategoriesAPIResourceMockMethod
      - ProductsAPIResourceMockMethod
      - OrdersAPIResourceMockMethod
      - ConsumerAPIResourceMockMethod
      - OthersAPIResourceMockMethod
    Properties:
      RestApiId: !Ref RestApiGateway

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      RestApiId: !Ref RestApiGateway
      DeploymentId: !Ref Deployment

Outputs:
  AppApiEndpoint:
    Description: API Endpoint
    Value: !Sub "https://${RestApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"
    Export:
      Name: AppApiEndpoint