AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation for API Gateway'

Resources:
  RestApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: lanchonete-do-bairro-api-gateway

  ProviderAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'provider'

  ProviderProxyAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ProviderAPIResource
      RestApiId: !Ref RestApiGateway
      PathPart: '{proxy+}'

  TotemAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'totem'

  TotemProxyAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref TotemAPIResource
      RestApiId: !Ref RestApiGateway
      PathPart: '{proxy+}'

  TotemSignInAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'sign-in'

  TotemSignUpAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      PathPart: 'sign-up'

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref RestApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !ImportValue CognitoUserPoolARN

  TotemSignInAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref TotemSignInAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: http://aa7b2f337f86d4a178733171e42972cf-1841160873.us-east-1.elb.amazonaws.com/api/v1/clients/sign-in
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  TotemSignUpAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref TotemSignUpAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: http://aa7b2f337f86d4a178733171e42972cf-1841160873.us-east-1.elb.amazonaws.com/api/v1/clients/sign-up
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  ProviderAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref ProviderProxyAPIResource
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: http://aa7b2f337f86d4a178733171e42972cf-1841160873.us-east-1.elb.amazonaws.com/{proxy}
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  TotemAPIResourceMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref TotemProxyAPIResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: http://aa7b2f337f86d4a178733171e42972cf-1841160873.us-east-1.elb.amazonaws.com/{proxy}
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TotemSignInAPIResourceMockMethod
      - TotemSignUpAPIResourceMockMethod
      - ProviderAPIResourceMockMethod
      - TotemAPIResourceMockMethod
    Properties:
      RestApiId: !Ref RestApiGateway

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      RestApiId: !Ref RestApiGateway
      DeploymentId: !Ref Deployment

Outputs:
  AppApiEndpoint:
    Description: API Endpoint
    Value: !Sub "https://${RestApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"
    Export:
      Name: AppApiEndpoint